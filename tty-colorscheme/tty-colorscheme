#!/bin/bash

cs_dir="/etc/tty-colorscheme/colorschemes"

_fnt_err() {
    [[ -z "${fnt_arr[0]}" ]] && printf "No psf fonts found\n"
}

_get_fonts() {
    fnt_dir="$(find /usr -type d -name "consolefonts" 2>/dev/null)"
    find "${fnt_dir}" -name "*.psf*" -exec file {} + 2>/dev/null \
        | awk -F: '/gzip|PC Screen Font/ { print $1 }' \
        | sort -V
}

_set_colors() {
    # Black   Red     Green   Yellow  Blue    Magenta Cyan    White
    # color01 color02 color03 color04 color05 color06 color07 color08
    # color09 color10 color11 color12 color13 color14 color15 color16

    printf "\e]P0%s\e]P1%s\e]P2%s\e]P3%s\e]P4%s\e]P5%s\e]P6%s\e]P7%s" \
        "${color01:?}" "${color02:?}" "${color03:?}" "${color04:?}" \
        "${color05:?}" "${color06:?}" "${color07:?}" "${color08:?}"

    printf "\e]P8%s\e]P9%s\e]PA%s\e]PB%s\e]PC%s\e]PD%s\e]PE%s\e]PF%s" \
        "${color09:?}" "${color10:?}" "${color11:?}" "${color12:?}" \
        "${color13:?}" "${color14:?}" "${color15:?}" "${color16:?}"
}

cs_list_schemes() {
    for cs_name in "${cs_dir}"/*; do
        basename "${cs_name}"
    done
}

cs_list_fonts() {
    mapfile -t fnt_arr < <(_get_fonts)
    _fnt_err && exit 1
    for fnt_name in "${fnt_arr[@]}"; do
        basename "${fnt_name}" | cut -d. -f1
    done
}

cs_print_palette() {
    cnt=0
    for bkgrnd in {40..47}; do
        printf "\e[%sm" "${bkgrnd}"
        for bold in 22 1; do
            printf "\e[%sm" "${bold}"
            for frgrnd in {30..37}; do
                printf "\e[%sm %3s" "${frgrnd}" "${cnt}"
                ((cnt++))
            done
        done
        printf "\e[0m\n"
    done
}

cs_shift() {
    mapfile -t cs_arr < <(cs_list_schemes)
    max_ind_cs="$((${#cs_arr[@]}-1))"
    ind_cs=-1

    mapfile -t fnt_arr < <(_get_fonts)
    max_ind_fnt="$((${#fnt_arr[@]}-1))"
    ind_fnt=-1

    mode=""
    clear

    while true; do
        [[ "${mode}" == "fnt" ]] && clear
        _fnt_err && ind_fnt=-1

        if [[ "${mode}" == "cs" ]] && [[ "${ind_cs}" -gt -1 ]]; then
            cs="${cs_arr[${ind_cs}]}"
            cs_set_scheme "${cs}"
        elif [[ "${mode}" == "fnt" ]] && [[ "${ind_fnt}" -gt -1 ]]; then
            fnt="${fnt_arr[${ind_fnt}]}"
            setfont "${fnt}"
            showconsolefont
            printf "Setting %s font\n" "$(basename "${fnt}" | cut -d. -f1)"
        fi

        printf "\nUse j and k keys to shift through colorschemes\n"
        printf "Use h and l keys to shift through fonts\n"

        read -rsn1
        case "${REPLY}" in
            j)
                mode="cs"
                [[ "${ind_cs}" -lt "${max_ind_cs}" ]] && ((ind_cs++))
                ;;
            k)
                mode="cs"
                if [[ "${ind_cs}" -gt 0 ]]; then
                    ((ind_cs--))
                elif [[ "${ind_cs}" == -1 ]]; then
                    ind_cs=0
                fi
                ;;
            l)
                mode="fnt"
                [[ "${ind_fnt}" -lt "${max_ind_fnt}" ]] && ((ind_fnt++))
                ;;
            h)
                mode="fnt"
                if [[ "${ind_fnt}" -gt 0 ]]; then
                    ((ind_fnt--))
                elif [[ "${ind_fnt}" == -1 ]]; then
                    ind_fnt=0
                fi
                ;;
            *)
                exit 0
                ;;
        esac
    done
}

cs_set_scheme() {
    cs_file="${cs_dir}/$1"

    if [[ ! -f "${cs_file}" ]]; then
        printf "Invalid colorscheme: %s\n" "$1"
        exit 1
    fi

    source "${cs_file}"

    for i in {1..6}; do
        _set_colors > "/dev/tty${i}"
    done > /dev/null 2>&1

    if [[ "${TERM}" == "linux" ]]; then
        clear
        $(basename "$0") -p
    fi

    printf "Setting %s colorscheme\n" "$1"
}

cs_print_help() {
    printf "Usage: %s [-cfps | colorscheme]\n" "$(basename "$0")"
    printf "  -c    list colorschemes\n"
    printf "  -f    list psf fonts\n"
    printf "  -p    print current palette\n"
    printf "  -s    shift through colorschemes and fonts\n"
}

while getopts ":cfps" opt; do
    case "${opt}" in
        c)
            cs_list_schemes
            exit 0
            ;;
        f)
            cs_list_fonts
            exit 0
            ;;
        p)
            cs_print_palette
            exit 0
            ;;
        s)
            cs_shift
            exit 0
            ;;
        *)
            printf "Invalid option -%s\n" "${OPTARG}"
            cs_print_help
            exit 1
            ;;
    esac
done

if [[ "$#" -eq 1 ]]; then
    cs_set_scheme "$1"
    exit 0
fi

cs_print_help
